{
  "version": 3,
  "sources": ["../components/counter.ts", "../components/profile.ts", "../components/footer.ts", "../components/router.ts", "../client/registry.ts"],
  "sourcesContent": [
    "import type { Handler } from '../../../../src/exports/component'\n\nexport type Input = {\n  initial: number\n}\ntype Static = {\n  limit: number\n}\ntype State = {\n  count: number\n}\n\nexport const _static: Static = {\n  limit: 12\n}\n\nexport const context = ['lang']\n\nexport const state: State = {\n  count: 0\n}\n\nexport const handler: Handler<Input, State, Static> = {\n  // onCreate(){ this.state.count = Number( this.input.initial ) },\n  onInput(){ this.state.count = Number( this.input.initial ) },\n  handleClick( e ){\n    if( this.state.count >= this.static.limit )\n      return\n\n    this.state.count++\n    this.emit('update', this.state.count )\n  }\n}\n\nexport const stylesheet = `\n  span { font: 14px arial; color: blue; }\n`\n  \nexport default `<div>\n  <span html=this.input.__innerHtml></span>: \n  <span text=\"this.state.count\"></span>\n  <br>\n  <button on-click=\"handleClick\">\n    <span text=\"Count\"></span>\n    (<span text=this.context.lang></span>)\n  </button>\n</div>`",
  "\nexport const context = ['getUser']\n\nexport const stylesheet = `\n  * { font-family: helvetica }\n`\n\nexport default `\n<async await=\"this.context.getUser, 'Peter Giligous'\">\n  <preload>Preloading...</preload>\n  <resolve>\n    <div>\n      <ul style=\"{ border: '1px solid black', padding: '15px' }\">\n        <li text=this.async.response.name></li>\n        <li text=this.async.response.email></li>\n      </ul>\n\n      <counter initial=5 on-update=\"value => console.log('procount --', value )\">By</counter>\n    </div>\n  </resolve>\n  <catch><span text=this.async.error></span></catch>\n</async>\n`",
  "export const _static = {\n  content: 'Nexted counter component'\n}\n\nexport default `<p>\n  <small style=\"color:gray\" text=this.static.content>...</small>\n</p>`",
  "\nexport const _static = {\n  global: false,\n  parseQuery: ( str: string ) => {\n    const\n    obj: any = {},\n    array = str.split('&')\n\n    array.map( each => {\n      const [ key, value ] = each.split('=')\n      obj[ key ] = value\n    })\n\n    return obj\n  },\n  routes: []\n}\n\nexport const state = {\n  currentPage: null,\n  currentRoute: null,\n  params: {},\n  query: {},\n  refreshing: false,\n}\n\nexport const handler = {\n  onInput(){\n    // if( !this.input.routes )\n    //   return\n    \n    console.log( this.input )\n\n    // this.static.routes = routes.map( route => {\n    //   // Mount default page\n    //   route = this.loadComponent( route )\n\n    //   if( route.path === defaultPath \n    //       || route.name === defaultRoute\n    //       || route.default )\n    //     defaultPath = defaultPath || route.path\n\n    //   const\n    //   // Retrieve pathname variables\n    //   pathVars = route.path.match(/:[^\\/]*(\\/|$)/gi),\n    //   // Convert path to wildcard matching regex path\n    //   pathRegex = route.path.replaceAll('/', '\\\\/')\n    //                         .replaceAll(/:[^\\/]*(\\/|$)/gi, '([^\\\\\\/]+)(?:\\\\\\/|$)')\n      \n    //   return {\n    //     ...route, \n    //     pathVars,\n    //     pathRegex: new RegExp(`${pathRegex}$`, 'i')\n    //   }\n    // } )\n\n    // const cpathname = window.location.pathname\n    // defaultPath = defaultPath\n    //               && cpathname == '/' \n    //               && cpathname !== defaultPath ?\n    //                       // Default path different root path `/`\n    //                       defaultPath\n    //                       // Use first route as default\n    //                       : cpathname ? cpathname + window.location.search : this.static.routes[0].path\n\n    // this.navigate( defaultPath )\n  },\n  onMount(){ \n    // if( this.input.global ){\n    //   window.navigate = this.navigate.bind(this)\n    //   window.refresh = () => {\n    //     this.state.refreshing = true\n    //     setTimeout( () => this.state.refreshing = false, 10 )\n    //   }\n    \n    //   window.addEventListener('popstate', e => e.state && this.navigate( e.state.path, true ) )\n    // }\n  },\n\n  loadComponent( route ){\n    if( !route.component )\n      route.component = require( route.page )\n\n    return route\n  },\n  navigate( path, back ){\n    // Record new navigation history\n    !back && history.pushState({ path }, '', path )\n\n    const parts = path.split('?')\n    path = parts[0]\n    \n    // Parse search query\n    const query = parts[1] ? this.static.parseQuery( parts[1] ) : {}\n\n    // Routing state prior to where to nativate to\n    let fromState: any = null \n    if( this.state.currentRoute ){\n      fromState = {\n        name: this.state.currentRoute.name,\n        path: this.state.currentRoute.path,\n        params: this.state.params\n      }\n\n      // Before match and render page event\n      this.emit('before', { fromState, toState: { path, query } })\n    }\n    \n    // Match path with define routes\n    const result = this.match( path )\n    // Page not found\n    if( !result ){\n      this.state.currentPage ?\n                    this.once('update', () => this.emit('not-found', path ) )\n                    : setTimeout( () => this.emit('not-found', path ), 200 )\n                    \n      return this.setState({ currentPage: null, params: {}, query: {} })\n    }\n\n    const { route, params } = result\n\n    // After match and render page event\n    this.once('update', () => this.emit('after', {\n      fromState,\n      toState: {\n        name: route.name,\n        path: route.path,\n        params,\n        query\n      }\n    }) )\n    \n    this.setState({\n      currentPath: path,\n      currentPage: this.loadComponent( route ).component,\n      currentRoute: route,\n      params,\n      query\n    })\n  },\n  match( path ){\n    const params: any = {}\n    let matchRoute = false\n\n    for( const route of this.static.routes ){\n      const\n      { pathVars, pathRegex } = route,\n      matches = path.match( pathRegex )\n\n      // Find matching path\n      if( matches !== null && matches.index === 0 ){\n        // Extract pathname params values\n        for( let x = 0; x + 1 < matches.length && x < pathVars.length; x++ )\n          params[ pathVars[x].replaceAll(/[\\/:]/g, '') ] = matches[ x + 1 ]\n\n        matchRoute = route\n        break\n      }\n    }\n\n    return matchRoute ? { route: matchRoute, params } : false\n  }\n}\n\nexport default `<div>Router</div>`\n\n// <if by=this.state.refreshing></if>\n// <else>\n//   <${state.currentPage} key=(this.state.currentRoute && this.state.currentRoute.name) params=this.state.params query=this.state.query/>\n// </else>\n",
  "\nimport type Lips from '../../../../dist/component.min'\n\nimport * as Counter from '../components/counter'\nimport * as Profile from '../components/profile'\nimport * as Footer from '../components/footer'\n\nimport * as Router from '../components/router'\n\nexport default ( lips: Lips ) => {\n  lips.register('counter', Counter )\n  lips.register('profile', Profile )\n  lips.register('footer', Footer )\n\n  lips.register('router', Router )\n}"
  ],
  "mappings": "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",
  "debugId": "F6120FD4A245565F64756e2164756e21",
  "names": []
}