{
  "version": 3,
  "sources": ["../components/counter.ts", "../components/profile.ts", "../components/footer.ts", "../components/router.ts", "../client/registry.ts"],
  "sourcesContent": [
    "import type { Handler } from '../../../../src/exports/component'\n\nexport type Input = {\n  initial: number\n}\ntype Static = {\n  limit: number\n}\ntype State = {\n  count: number\n}\n\nexport const _static: Static = {\n  limit: 12\n}\n\nexport const context = ['lang']\n\nexport const state: State = {\n  count: 0\n}\n\nexport const handler: Handler<Input, State, Static> = {\n  // onCreate(){ this.state.count = Number( this.input.initial ) },\n  onInput(){ this.state.count = Number( this.input.initial ) },\n  handleClick( e ){\n    console.log( e )\n    if( this.state.count >= this.static.limit )\n      return\n\n    this.state.count++\n    this.emit('update', this.state.count )\n  }\n}\n\nexport const stylesheet = `\n  span { font: 14px arial; color: blue; }\n`\n  \nexport default `<div>\n  <span html=this.input.__innerHtml></span>: \n  <span text=\"this.state.count\"></span>\n  <br>\n  <button on-click=\"handleClick\">\n    <span text=\"Count\"></span>\n    (<span text=this.context.lang></span>)\n  </button>\n</div>`",
  "\nexport const context = ['getUser']\n\nexport const stylesheet = `\n  * { font-family: helvetica }\n`\n\nexport default `\n<async await=\"this.context.getUser, 'Peter Giligous'\">\n  <preload>Preloading...</preload>\n  <resolve>\n    <div>\n      <ul style=\"{ border: '1px solid black', padding: '15px' }\">\n        <li text=this.async.response.name></li>\n        <li text=this.async.response.email></li>\n      </ul>\n\n      <counter initial=5 on-update=\"value => console.log('procount --', value )\">By</counter>\n    </div>\n  </resolve>\n  <catch><span text=this.async.error></span></catch>\n</async>\n`",
  "export const _static = {\n  content: 'Nexted counter component'\n}\n\nexport default `<p>\n  <small style=\"color:gray\" text=this.static.content>...</small>\n</p>`",
  "import type { Handler, Template } from '../../../../src/exports/component'\n\ntype TObject<T> = { [index: string]: any }\ntype RouteDef = {\n  path: string\n  template: Template\n  default?: boolean\n}\nexport type Input = {\n  global?: boolean\n  routes: RouteDef[]\n}\n\ntype Route = RouteDef & {\n  pathVars: string[]\n  pathRegex: RegExp\n}\ntype Static = {\n  global: boolean\n  routes: Route[]\n  currentPath: string\n  currentRoute: Route | null\n  params: TObject<any>\n  query: TObject<any>\n}\n\nexport const _static: Static = {\n  global: false,\n  routes: [],\n  currentPath: '/',\n  currentRoute: null,\n  params: {},\n  query: {}\n}\n\nfunction parseQuery( str: string ){\n  const\n  obj: any = {},\n  array = str.split('&')\n\n  array.map( each => {\n    const [ key, value ] = each.split('=')\n    obj[ key ] = value\n  })\n\n  return obj\n}\n\ndeclare global {\n  interface Window {\n    navigate: ( path: string, back?: boolean ) => void\n  }\n}\n\nexport const handler: Handler<Input, undefined, Static> = {\n  onInput(){\n    if( !this.input.routes )\n      return\n\n    if( this.input.global )\n      this.static.global = this.input.global\n\n    let defaultPath\n    this.static.routes = this.input.routes.map( ({ path, template, default: _default }) => {\n      if( _default )\n        defaultPath = path\n\n      const\n      // Retrieve pathname variables\n      pathVars = path.match(/:[^\\/]*(\\/|$)/gi) || [],\n      // Convert path to wildcard matching regex path\n      pathRegex = path.replaceAll('/', '\\\\/')\n                      .replaceAll(/:[^\\/]*(\\/|$)/gi, '([^\\\\\\/]+)(?:\\\\\\/|$)')\n      \n      return {\n        path,\n        template,\n        default: _default, \n        pathVars,\n        pathRegex: new RegExp(`${pathRegex}$`, 'i')\n      }\n    } )\n\n    if( this.input.global ){\n      const cpathname = window.location.pathname\n      defaultPath = defaultPath\n                    && cpathname == '/' \n                    && cpathname !== defaultPath ?\n                            // Default path different root path `/`\n                            defaultPath\n                            // Use first route as default\n                            : cpathname ? cpathname + window.location.search : this.static.routes[0].path\n    }\n\n    this.navigate( defaultPath )\n  },\n  onMount(){\n    if( this.input.global ){\n      window.navigate = this.navigate.bind(this)\n      // window.refresh = () => {\n        \n      // }\n    \n      window.addEventListener('popstate', e => e.state && this.navigate( e.state.path, true ) )\n    }\n  },\n\n  navigate( path: string, back?: boolean ){\n    // Record new navigation history\n    !back\n    && this.static.global\n    && history.pushState({ path }, '', path )\n\n    const parts = path.split('?')\n    path = parts[0]\n    \n    // Parse search query\n    const query = parts[1] ? parseQuery( parts[1] ) : {}\n\n    // Routing state prior to where to nativate to\n    let fromState: any = null \n    if( this.static.currentRoute ){\n      fromState = {\n        path: this.static.currentRoute.path,\n        params: this.static.params\n      }\n\n      // Before match and render page event\n      this.emit('before', { fromState, toState: { path, query } })\n    }\n    \n    // Match path with define routes\n    const result = this.match( path )\n    // Page not found\n    if( !result ){\n      this.static.currentRoute = null\n      this.static.params = {}\n      this.static.query = {}\n\n      this.emit('not-found', path )\n      return\n    }\n\n    // After match and render page event\n    const { route, params } = result\n    this.emit('after', {\n      fromState,\n      toState: {\n        path: route.path,\n        params,\n        query\n      }\n    })\n    \n    this.static.currentPath = path\n    this.static.currentRoute = route\n    this.static.params = params\n    this.static.query = query\n\n    // Input passed routing arguments\n    route.template.input = { params, query }\n\n    const \n    page = this.lips?.render( path, route.template )\n    if( !page ){\n      this.emit('not-found', path )\n      return\n    }\n\n    this.getEl().empty().append( page.getEl() )\n  },\n  match( path ){\n    const params: any = {}\n    let matchRoute: Route | boolean = false\n\n    for( const route of this.static.routes ){\n      const\n      { pathVars, pathRegex } = route,\n      matches = path.match( pathRegex )\n\n      // Find matching path\n      if( matches !== null && matches.index === 0 ){\n        // Extract pathname params values\n        for( let x = 0; x + 1 < matches.length && x < pathVars.length; x++ )\n          params[ pathVars[x].replaceAll(/[\\/:]/g, '') ] = matches[ x + 1 ]\n\n        matchRoute = route\n        break\n      }\n    }\n\n    return matchRoute ? { route: matchRoute, params } : false\n  }\n}\n\nexport default `<wrapper></wrapper>`",
  "\nimport type Lips from '../../../../dist/component.min'\n\nimport * as Counter from '../components/counter'\nimport * as Profile from '../components/profile'\nimport * as Footer from '../components/footer'\n\nimport * as Router from '../components/router'\n\nexport default ( lips: Lips ) => {\n  lips.register('counter', Counter )\n  lips.register('profile', Profile )\n  lips.register('footer', Footer )\n\n  lips.register('router', Router )\n}"
  ],
  "mappings": "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",
  "debugId": "B9715FAE83C680A664756e2164756e21",
  "names": []
}